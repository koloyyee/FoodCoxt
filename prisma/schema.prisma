generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id          Int                  @id @default(autoincrement())
  code        String               @unique @db.VarChar(255)
  name        String               @db.VarChar(255)
  packingSize String               @db.VarChar(255)
  price       Float
  quantity    Int
  unitId      Int
  categoryId  Int
  supplierId  Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  typeId      Int
  category    Category             @relation(fields: [categoryId], references: [id])
  supplier    Supplier             @relation(fields: [supplierId], references: [id])
  type        Type                 @relation(fields: [typeId], references: [id])
  unit        Unit                 @relation(fields: [unitId], references: [id])
  recipe      IngredientOnRecipe[]
}

model Type {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(255)
  ingredient Ingredient[]
  recipe     Recipe[]
}

model Unit {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(255)
  ingredient Ingredient[]
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(255)
  ingredient Ingredient[]
}

model Supplier {
  id         Int          @id @default(autoincrement())
  name       String       @unique @db.VarChar(255)
  email      String?      @unique
  phone      String?      @unique
  ingredient Ingredient[]
}

model IngredientOnRecipe {
  ingredientId Int
  recipeId     Int
  quantity     Float
  ingrdient    Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])

  @@id([ingredientId, recipeId])
}

model Recipe {
  id              Int                  @id @default(autoincrement())
  method          String
  totalInput      Float
  totalOutput     Float
  yield           Float
  servingsNumber  Int
  servingQuantity Int
  pricePerUnit    Float
  pricePerServing Float
  name            String
  totalCost       Float
  typeId          Int
  type            Type                 @relation(fields: [typeId], references: [id])
  ingredient      IngredientOnRecipe[]
}
